# Here is a ipynb folder with the description and the code :

{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4811a728",
   "metadata": {},
   "source": [
    "# Python Single Responsibility Principle :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9d078e38",
   "metadata": {},
   "outputs": [],
   "source": [
    "class SubsystemA:\n",
    "    def operation1(self):\n",
    "        print(\"SubsystemA operation1\")\n",
    "\n",
    "    def operation2(self):\n",
    "        print(\"SubsystemA operation2\")\n",
    "\n",
    "\n",
    "class SubsystemB:\n",
    "    def operation1(self):\n",
    "        print(\"SubsystemB operation1\")\n",
    "\n",
    "    def operation2(self):\n",
    "        print(\"SubsystemB operation2\")\n",
    "\n",
    "\n",
    "class SubsystemC:\n",
    "    def operation1(self):\n",
    "        print(\"SubsystemC operation1\")\n",
    "\n",
    "    def operation2(self):\n",
    "        print(\"SubsystemC operation2\")\n",
    "\n",
    "    def operation3(self):\n",
    "        print(\"SubsystemC operation3\")\n",
    "\n",
    "\n",
    "class Facade:\n",
    "    def __init__(self):\n",
    "        self._subsystem_a = SubsystemA()\n",
    "        self._subsystem_b = SubsystemB()\n",
    "        self._subsystem_c = SubsystemC()\n",
    "\n",
    "    def operation1(self):\n",
    "        self._subsystem_a.operation1()\n",
    "        self._subsystem_b.operation1()\n",
    "        self._subsystem_c.operation1()\n",
    "\n",
    "    def operation2(self):\n",
    "        self._subsystem_a.operation2()\n",
    "        self._subsystem_b.operation2()\n",
    "        self._subsystem_c.operation2()\n",
    "\n",
    "    def operation3(self):\n",
    "        self._subsystem_c.operation3()\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    facade = Facade()\n",
    "    facade.operation1()\n",
    "    facade.operation2()\n",
    "    facade.operation3()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d215ac49",
   "metadata": {},
   "source": [
    "In this example, there are three subsystems (SubsystemA, SubsystemB, and SubsystemC), each with multiple methods. The Facade class again creates instances of all three subsystems in its constructor, but now it provides three different methods (operation1, operation2, and operation3) to access the functionalities of the subsystems. The operation1 method calls operation1 on all three subsystems, the operation2 method calls operation2 on all three subsystems, and the operation3 method calls operation3 on only SubsystemC. The client code can create an instance of Facade and call any of its methods to access the functionalities of the subsystems through a simplified interface."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b031e71",
   "metadata": {},
   "source": [
    "**Here's an example implementation of such a facade class:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4c6024d5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "\n",
    "class PaymentGateway:\n",
    "    def __init__(self, api_key):\n",
    "        self._api_key = api_key\n",
    "\n",
    "    def process_payment(self, amount, card_number, expiration_date, cvv):\n",
    "        response = requests.post(\n",
    "            \"https://payment-gateway.com/process_payment\",\n",
    "            data={\n",
    "                \"api_key\": self._api_key,\n",
    "                \"amount\": amount,\n",
    "                \"card_number\": card_number,\n",
    "                \"expiration_date\": expiration_date,\n",
    "                \"cvv\": cvv\n",
    "            }\n",
    "        )\n",
    "        return response.json()\n",
    "\n",
    "\n",
    "class ShippingProvider:\n",
    "    def __init__(self, api_key):\n",
    "        self._api_key = api_key\n",
    "\n",
    "    def calculate_shipping_cost(self, weight, destination):\n",
    "        response = requests.post(\n",
    "            \"https://shipping-provider.com/calculate_shipping_cost\",\n",
    "            data={\n",
    "                \"api_key\": self._api_key,\n",
    "                \"weight\": weight,\n",
    "                \"destination\": destination\n",
    "            }\n",
    "        )\n",
    "        return response.json()\n",
    "\n",
    "\n",
    "class TaxCalculator:\n",
    "    def __init__(self, api_key):\n",
    "        self._api_key = api_key\n",
    "\n",
    "    def calculate_tax(self, amount, destination):\n",
    "        response = requests.post(\n",
    "            \"https://tax-calculator.com/calculate_tax\",\n",
    "            data={\n",
    "                \"api_key\": self._api_key,\n",
    "                \"amount\": amount,\n",
    "                \"destination\": destination\n",
    "            }\n",
    "        )\n",
    "        return response.json()\n",
    "\n",
    "\n",
    "class ExternalServicesFacade:\n",
    "    def __init__(self, payment_gateway_api_key, shipping_provider_api_key, tax_calculator_api_key):\n",
    "        self._payment_gateway = PaymentGateway(payment_gateway_api_key)\n",
    "        self._shipping_provider = ShippingProvider(shipping_provider_api_key)\n",
    "        self._tax_calculator = TaxCalculator(tax_calculator_api_key)\n",
    "\n",
    "    def process_order(self, amount, card_number, expiration_date, cvv, weight, destination):\n",
    "        payment_result = self._payment_gateway.process_payment(amount, card_number, expiration_date, cvv)\n",
    "        shipping_cost = self._shipping_provider.calculate_shipping_cost(weight, destination)\n",
    "        tax_amount = self._tax_calculator.calculate_tax(amount, destination)\n",
    "\n",
    "        total_amount = amount + shipping_cost + tax_amount\n",
    "        return {\n",
    "            \"payment_result\": payment_result,\n",
    "            \"shipping_cost\": shipping_cost,\n",
    "            \"tax_amount\": tax_amount,\n",
    "            \"total_amount\": total_amount\n",
    "        }"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
